// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© BlueJayBird
//@version=4

study(title="[bjb] SVA - Simple Volume Analysis, by @BlueJayBird", shorttitle="SVA", format = format.volume, precision = 0, scale = scale.right, overlay = false)

// ------------------------------------------- Inputs
// Longs and Shorts
volume_enable = input(defval = true, title = "Enable Volume", type = input.bool)
volume_enable_ma = input(defval = true, title = "Enable Volume MAs (VMA)", type = input.bool)
enable_supply_signals = input(defval = true, title = "Enable Supply Zone Signals (SZS)", type = input.bool)
enable_demand_signals = input(defval = true, title = "Enable Demand Zone Signals (DZS)", type = input.bool)
volume_res1_multiplier = input(defval = 1.1, title = "Low Volume (LV) Multiplier", type = input.float)
volume_res2_multiplier = input(defval = 1.5, title = "Medium Volume (MV) Multiplier", type = input.float)
volume_res3_multiplier = input(defval = 2.1, title = "High Volume (HV) Multiplier", type = input.float)
volume_res4_multiplier = input(defval = 7.5, title = "Ultra-High Volume (UHV) Multiplier", type = input.float)
volume_smoother_a = input(defval = 20, title = "VMA Smoother A (LV, MV, HV)", type = input.integer)
volume_smoother_b = input(defval = 5, title = "VMA Smoother B (LV, MV, HV)", type = input.integer)
volume_smoother_c = input(defval = 200, title = "VMA Smoother C (UHV)", type = input.integer)
volume_resolution = ""
volume_enable_vlr = input(defval = false, title = "Enable Volume Linebreak Resolution (VLR)", type = input.bool)
volume_resolution_vlr = input(defval = "", title = "VLR Resolution", type = input.resolution)
volume_enable_reversed = input(defval = false, title = "Switch Down Bearish Volume Bars", type = input.bool)
volume_enable_vlc = input(defval = false, title = "Enable Volume Line Close (VLC)", type = input.bool)
volume_sec = security(symbol = syminfo.tickerid, resolution = volume_resolution, expression = volume)
volume_sec_vlr = security(symbol = syminfo.tickerid, resolution = volume_resolution_vlr, expression = volume)
volume_sec_close = security(symbol = syminfo.tickerid, resolution = volume_resolution, expression = close)
volume_sec_open = security(symbol = syminfo.tickerid, resolution = volume_resolution, expression = open)
drawOnRealTime = true

// ------------------------------------------- Colors
color_upwards_price = #26a69a // Classic Green
color_downwards_price = #ef5350 // Classic Red

// ------------------------------------------- Functions
// Bar Colors
vol_color(ma, ma2, ma3, ma4) =>
    if volume_sec_close >= volume_sec_open
        // Bullish Volume
        if volume_sec >= ma4
            color.new(color.white, 0)
        else if volume_sec >= ma3
            color.new(color.silver, 20)
        else if volume_sec >= ma2
            color.new(color_upwards_price, 10)
        else if volume_sec < ma2 and volume_sec >= ma
            color.new(color_upwards_price, 40)
        else
            vol_green = color.new(color_upwards_price, 70)
    else
        // Bearish
        if volume_sec >= ma4
            color.new(color.white, 0)
        else if volume_sec >= ma3
            color.new(color.silver, 20)
        else if volume_sec >= ma2
            color.new(color_downwards_price, 10)
        else if volume_sec < ma2 and volume_sec >= ma
            color.new(color_downwards_price, 40)
        else
            color.new(color_downwards_price, 70)
// Text Colors
text_color(ma4) =>
    if volume_sec >= ma4
        color.new(color.black, 0)
    else
        color.new(color.white, 0)
// Label Colors
label_color(ma2, ma3, ma4) =>
    if volume_sec >= ma4
        color.new(color.white, 0)
    else if hl2 > hl2[1]
        color_downwards_price
    else
        color_upwards_price

// ------------------------------------------- Calculations
vol_ma_resistance_1 = ema(sma(volume_sec * volume_res1_multiplier, volume_smoother_a), volume_smoother_b)
vol_ma_resistance_2 = ema(vwma(volume_sec * volume_res2_multiplier, volume_smoother_a), volume_smoother_b)
vol_ma_resistance_3 = ema(vwma(volume_sec * volume_res3_multiplier, volume_smoother_a), volume_smoother_b)
volume_res4_multiplier := timeframe.period == "60" ? 4.1 : 7.5
vol_ma_resistance_4 = sma(volume_sec * volume_res4_multiplier, volume_smoother_c)

// ------------------------------------------- Plotting
// MA
plot(series = volume_enable_ma and volume_resolution == "" ? vol_ma_resistance_1 : na, title = "LV", color = color.yellow, linewidth = 1, style = plot.style_line, transp = 40, editable = true)
plot(series = volume_enable_ma and volume_resolution == "" ? vol_ma_resistance_2 : na, title = "MV", color = color.orange, linewidth = 1, style = plot.style_line, transp = 30, editable = true)
plot(series = volume_enable_ma and volume_resolution == "" ? vol_ma_resistance_3 : na, title = "HV", color = color.red, linewidth = 1, style = plot.style_line, transp = 50, editable = true)
plot(series = volume_enable_ma and volume_resolution == "" ? vol_ma_resistance_4 : na, title = "UHV", color = color.white, linewidth = 1, style = plot.style_line, transp = 30, editable = true, display = display.none)
// Volume
volume_data = volume_enable_reversed ? volume_sec_close >= volume_sec_open ? volume_sec : volume_sec * -1 : volume_sec // For switching bearish volume upside down from the 0 level
plot(series = volume_enable ? volume_data : na, title = "Vol", color = vol_color(vol_ma_resistance_1, vol_ma_resistance_2, vol_ma_resistance_3, vol_ma_resistance_4), linewidth = 3, style = plot.style_histogram, editable = true) // Main volume plotting, color is defined using the moving avarages as triggering color change levels
plot(series = volume_enable_vlr ? volume_sec_vlr : na, title = "VLR", color = color.silver, transp = 50, linewidth = 1, style = plot.style_linebr, editable = true) // Plotting Volume Linebreak Resolution
// Primary Signals
plotshape(enable_supply_signals and (barstate.ishistory or drawOnRealTime) and volume_sec >= vol_ma_resistance_2 and hl2 > hl2[1] ? volume_sec + volume_sec * 0.1 : na, color = label_color(vol_ma_resistance_2, vol_ma_resistance_3, vol_ma_resistance_4), style = shape.labeldown, text = "S", transp = 0, textcolor = text_color(vol_ma_resistance_4), title = "Supply Zone Signals", location = location.absolute, editable = true)
plotshape(enable_demand_signals and (barstate.ishistory or drawOnRealTime) and volume_sec >= vol_ma_resistance_2 and hl2 <= hl2[1] ? volume_sec + volume_sec * 0.1 : na, color = label_color(vol_ma_resistance_2, vol_ma_resistance_3, vol_ma_resistance_4), style = shape.labeldown, text = "D", transp = 0, textcolor = text_color(vol_ma_resistance_4), title = "Demand Zone Signals", location = location.absolute, editable = true)
// Volume Line Close (VLC)
plot(series = volume_enable_vlc ? volume : na, title = "VLC", color = color.lime, linewidth = 1, style = plot.style_line, transp = 20, editable = true)
// Zero Line
zero_line_color = color.new(color.silver, 50)
hline(price = 0, title = "Zero Line", color = zero_line_color, linestyle = hline.style_solid, linewidth = 1, editable = true)

// l = line.new(x1 = highestbars(volume, 100), y1 = highest(volume, 100), x2 = bar_index, y2 = volume, width = 1, extend = extend.none)