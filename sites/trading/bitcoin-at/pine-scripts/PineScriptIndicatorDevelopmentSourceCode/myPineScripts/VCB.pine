// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© BlueJayBird
//@version=4
study(title="Visual Candlestick Blender, by @BlueJayBird", shorttitle="VCB", overlay=true)

// If this tool has helped you to improve your trading and therefore your income, any donation is appreciated:
// BTC: 3Dj9jfGuJ861oEH7kA1zpgMssPw2PYF7Gq
// ETH and USDT: 0xc8645305ab8c08f08bcbc89c020b63362527f771

// Style
thickness = 2
transp_ma = 40
transp_fill = 90
transp_fill_20 = 80
securityGap = barmerge.gaps_off 
securityLookahead = barmerge.lookahead_on

// // Get user input
// res = input(title="Timeframe", type=input.resolution, defval="D")

// Non-repainting security function
// Created by Matthew J. Slabosz, at www.zenandtheartoftrading.com
// rp_security(_symbol, _res, _src) => security(_symbol, _res, _src[barstate.isrealtime ? 1 : 0], securityLookahead)

// // Get HTF price data
// htfHigh = rp_security(syminfo.tickerid, res, high)
// htfLow = rp_security(syminfo.tickerid, res, low)

// CSB Automatic
// enableCSBautomatic = input(defval=false, type=input.bool, title="Enable CSB Automatic Mode")

// Candle Blending Lines (PRIMARY)
enable1 = input(defval=true, title="Enable Candlestick Blendings 1 (CSB1)")
res1 = input(title = "CSB1 Resolution", defval = "60", type=input.resolution)
o1 = security(syminfo.ticker, res1, open, securityGap, securityLookahead)
h1 = security(syminfo.ticker, res1, high, securityGap, securityLookahead)
l1 = security(syminfo.ticker, res1, low, securityGap, securityLookahead)
c1 = security(syminfo.ticker, res1, close, securityGap, securityLookahead)
palette1 = c1 > o1 ? color.lime : color.red
paletteTraslucid1 = c1 > o1 ? color.new(color.lime, 50) : color.new(color.red, 50)
dashedWorkaround1 = bar_index % 2 == 0 ? palette1 : paletteTraslucid1
plot(enable1 ? o1 : na, title="O1", color=palette1, linewidth=thickness + 1, transp=transp_ma, editable=true, style=plot.style_stepline)
plot(enable1 ? h1 : na, title="H1", color=dashedWorkaround1, linewidth=thickness, transp=70, editable=true, style=plot.style_stepline)
plot(enable1 ? l1 : na, title="L1", color=dashedWorkaround1, linewidth=thickness, transp=70, editable=true, style=plot.style_stepline)
plot(enable1 ? c1 : na, title="C1", color=palette1, linewidth=thickness + 1, transp=transp_ma, editable=true, style=plot.style_stepline)

// Candle Blending Lines (SECONDARY)
enable2 = input(false, title="Enable Candlestick Blendings 2 (CSB2)")
res2 = input(title = "CSB2 Resolution", defval = "D", type=input.resolution)
o2 = security(syminfo.ticker, res2, open, securityGap, securityLookahead)
h2 = security(syminfo.ticker, res2, high, securityGap, securityLookahead)
l2 = security(syminfo.ticker, res2, low, securityGap, securityLookahead)
c2 = security(syminfo.ticker, res2, close, securityGap, securityLookahead)
palette2 = c2 > o2 ? color.aqua : color.yellow
paletteTraslucid2 = c2 > o2 ? color.new(color.aqua, 50) : color.new(color.yellow, 50)
dashedWorkaround2 = bar_index % 2 == 0 ? palette2 : paletteTraslucid2
plot(enable2 ? o2 : na, title="O2", color=palette2, linewidth=thickness + 1, transp=transp_ma, editable=true, style=plot.style_stepline)
plot(enable2 ? h2 : na, title="H2", color=dashedWorkaround2, linewidth=thickness, transp=70, editable=true, style=plot.style_stepline)
plot(enable2 ? l2 : na, title="L2", color=dashedWorkaround2, linewidth=thickness, transp=70, editable=true, style=plot.style_stepline)
plot(enable2 ? c2 : na, title="C2", color=palette2, linewidth=thickness + 1, transp=transp_ma, editable=true, style=plot.style_stepline)

// Candle Blending Lines (TERTIARY)
enable3 = input(false, title="Enable Candlestick Blendings 3 (CSB3)")
res3 = input(title = "CSB3 Resolution", defval = "W", type=input.resolution)
o3 = security(syminfo.ticker, res3, open, securityGap, securityLookahead)
h3 = security(syminfo.ticker, res3, high, securityGap, securityLookahead)
l3 = security(syminfo.ticker, res3, low, securityGap, securityLookahead)
c3 = security(syminfo.ticker, res3, close, securityGap, securityLookahead)
palette3 = c3 > o3 ? color.orange : color.fuchsia
paletteTraslucid3 = c3 > o3 ? color.new(color.orange, 50) : color.new(color.fuchsia, 50)
dashedWorkaround3 = bar_index % 2 == 0 ? palette3 : paletteTraslucid3
plot(enable3 ? o3 : na, title="O3", color=palette3, linewidth=thickness + 1, transp=transp_ma, editable=true, style=plot.style_stepline)
plot(enable3 ? h3 : na, title="H3", color=dashedWorkaround3, linewidth=thickness, transp=70, editable=true, style=plot.style_stepline)
plot(enable3 ? l3 : na, title="L3", color=dashedWorkaround3, linewidth=thickness, transp=70, editable=true, style=plot.style_stepline)
plot(enable3 ? c3 : na, title="C3", color=palette3, linewidth=thickness + 1, transp=transp_ma, editable=true, style=plot.style_stepline)

// Time Chartlines 1h and 4h, for 1m
enableTLc = input(defval=true, type=input.bool, title="Enable Timelines 1h (TLa)")
colorC = input(title="Color TLa", type=input.color, defval=color.white)
enableTLb = input(defval=true, type=input.bool, title="Enable Timelines 4h (TLb)")
colorB = input(title="Color TLb", type=input.color, defval=color.yellow)
enableTLa = input(defval=true, type=input.bool, title="Enable Timelines 1D (TLc)")
colorA = input(title="Color TLc", type=input.color, defval=color.red)
enableTLd = input(defval=true, type=input.bool, title="Enable Timelines 1W (TLd)")
colorD = input(title="Color TLd", type=input.color, defval=color.lime)
transpTL = input(defval = 80, title = "Timelines Transparency")

targetTime0     = timestamp(year, month, dayofmonth, 00, 00, 00) //  1D
targetTime1     = timestamp(year, month, dayofmonth, 01, 00, 00) // 1h
targetTime2     = timestamp(year, month, dayofmonth, 02, 00, 00) // 1h
targetTime3     = timestamp(year, month, dayofmonth, 03, 00, 00) // 1h
targetTime4     = timestamp(year, month, dayofmonth, 04, 00, 00) //  4h
targetTime5     = timestamp(year, month, dayofmonth, 05, 00, 00) // 1h
targetTime6     = timestamp(year, month, dayofmonth, 06, 00, 00) // 1h
targetTime7     = timestamp(year, month, dayofmonth, 07, 00, 00) // 1h
targetTime8     = timestamp(year, month, dayofmonth, 08, 00, 00) //  4h
targetTime9     = timestamp(year, month, dayofmonth, 09, 00, 00) // 1h
targetTime10    = timestamp(year, month, dayofmonth, 10, 00, 00) // 1h
targetTime11    = timestamp(year, month, dayofmonth, 11, 00, 00) // 1h
targetTime12    = timestamp(year, month, dayofmonth, 12, 00, 00) //  4h
targetTime13    = timestamp(year, month, dayofmonth, 13, 00, 00) // 1h
targetTime14    = timestamp(year, month, dayofmonth, 14, 00, 00) // 1h
targetTime15    = timestamp(year, month, dayofmonth, 15, 00, 00) // 1h
targetTime16    = timestamp(year, month, dayofmonth, 16, 00, 00) //  4h
targetTime17    = timestamp(year, month, dayofmonth, 17, 00, 00) // 1h
targetTime18    = timestamp(year, month, dayofmonth, 18, 00, 00) // 1h
targetTime19    = timestamp(year, month, dayofmonth, 19, 00, 00) // 1h
targetTime20    = timestamp(year, month, dayofmonth, 20, 00, 00) //  4h
targetTime21    = timestamp(year, month, dayofmonth, 21, 00, 00) // 1h
targetTime22    = timestamp(year, month, dayofmonth, 22, 00, 00) // 1h
targetTime23    = timestamp(year, month, dayofmonth, 23, 00, 00) // 1h
targetTimeMonday = timestamp(year, month, dayofmonth, 00, 00, 00) // 1W
// Time Ranges
timeframeRangeA = timeframe.period == "1" or timeframe.period == "3" or timeframe.period == "5" or timeframe.period == "15" or timeframe.period == "30" or timeframe.period == "45" or timeframe.period == "60"
timeframeRangeB = timeframe.period == "1" or timeframe.period == "3" or timeframe.period == "5" or timeframe.period == "15"
timeframeRangeC = timeframe.period == "1" or timeframe.period == "3" or timeframe.period == "5"
timeframeRangeD = timeframe.period == "1" or timeframe.period == "3" or timeframe.period == "5" or timeframe.period == "15" or timeframe.period == "30" or timeframe.period == "45" or timeframe.period == "60" or timeframe.period == "120" or timeframe.period == "180" or timeframe.period == "240" or timeframe.period == "D"
// 1W
bgcolor(targetTime0 == time and enableTLd and timeframeRangeD and dayofweek == dayofweek.monday ? colorD : na, transp=transpTL, editable=false)
// 1D
bgcolor(targetTime0 == time and enableTLa and timeframeRangeA and dayofweek != dayofweek.monday ? colorA : na, transp=transpTL, editable=false)
// 4h
bgcolor(targetTime4  == time and enableTLb and timeframeRangeB ? colorB : na, transp=transpTL, editable=false)
bgcolor(targetTime8  == time and enableTLb and timeframeRangeB ? colorB : na, transp=transpTL, editable=false)
bgcolor(targetTime12 == time and enableTLb and timeframeRangeB ? colorB : na, transp=transpTL, editable=false)
bgcolor(targetTime16 == time and enableTLb and timeframeRangeB ? colorB : na, transp=transpTL, editable=false)
bgcolor(targetTime20 == time and enableTLb and timeframeRangeB ? colorB : na, transp=transpTL, editable=false)
// 1h
bgcolor(targetTime1     == time and enableTLc and timeframeRangeC ? colorC : na, transp=transpTL, editable=false)
bgcolor(targetTime2     == time and enableTLc and timeframeRangeC ? colorC : na, transp=transpTL, editable=false)
bgcolor(targetTime3     == time and enableTLc and timeframeRangeC ? colorC : na, transp=transpTL, editable=false)
bgcolor(targetTime5     == time and enableTLc and timeframeRangeC ? colorC : na, transp=transpTL, editable=false)
bgcolor(targetTime6     == time and enableTLc and timeframeRangeC ? colorC : na, transp=transpTL, editable=false)
bgcolor(targetTime7     == time and enableTLc and timeframeRangeC ? colorC : na, transp=transpTL, editable=false)
bgcolor(targetTime9     == time and enableTLc and timeframeRangeC ? colorC : na, transp=transpTL, editable=false)
bgcolor(targetTime10    == time and enableTLc and timeframeRangeC ? colorC : na, transp=transpTL, editable=false)
bgcolor(targetTime11    == time and enableTLc and timeframeRangeC ? colorC : na, transp=transpTL, editable=false)
bgcolor(targetTime13    == time and enableTLc and timeframeRangeC ? colorC : na, transp=transpTL, editable=false)
bgcolor(targetTime14    == time and enableTLc and timeframeRangeC ? colorC : na, transp=transpTL, editable=false)
bgcolor(targetTime15    == time and enableTLc and timeframeRangeC ? colorC : na, transp=transpTL, editable=false)
bgcolor(targetTime17    == time and enableTLc and timeframeRangeC ? colorC : na, transp=transpTL, editable=false)
bgcolor(targetTime18    == time and enableTLc and timeframeRangeC ? colorC : na, transp=transpTL, editable=false)
bgcolor(targetTime19    == time and enableTLc and timeframeRangeC ? colorC : na, transp=transpTL, editable=false)
bgcolor(targetTime21    == time and enableTLc and timeframeRangeC ? colorC : na, transp=transpTL, editable=false)
bgcolor(targetTime22    == time and enableTLc and timeframeRangeC ? colorC : na, transp=transpTL, editable=false)
bgcolor(targetTime23    == time and enableTLc and timeframeRangeC ? colorC : na, transp=transpTL, editable=false)

// 1M
// targetTimeRed = timestamp(year, month, dayofweek.sunday, 00, 00, 00) // 1h
// bgcolor(targetTimeRed == time ? color.red : na, transp=70, editable=false)

// vline(BarIndex, Color, LineStyle, LineWidth) => // Verticle Line Function, â50-54 lines maximum allowable per indicator
//     // return = line.new(BarIndex,   0.0, BarIndex,     100.0, xloc.bar_index, extend.both, Color, LineStyle, LineWidth) // Suitable for study(overlay=false) and RSI, Stochastic, etc...
//     // return = line.new(BarIndex,  -1.0, BarIndex,       1.0, xloc.bar_index, extend.both, Color, LineStyle, LineWidth) // Suitable for study(overlay=false) and +/-1.0 oscillators
//     return = line.new(BarIndex, low - tr, BarIndex, high + tr, xloc.bar_index, extend.both, Color, LineStyle, LineWidth) // Suitable for study(overlay=true)

// if(bar_index%10==0.0) // Generically plots a line every 10 bars
//     vline(bar_index, #FF8000ff, line.style_solid, 1) // Variable assignment not required