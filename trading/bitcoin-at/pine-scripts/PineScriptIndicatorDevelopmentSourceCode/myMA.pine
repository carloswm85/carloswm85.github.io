// @version=4
// tradingview@BlueJayBird
// @author @BlueJayBird
study(title="Moving Averages, by @BlueJayBird", shorttitle="MAs", format=format.price, overlay=true)

// MAD Scalping ------------------------------------------------------------------------
// Enable checkboxes
movingAverage = input(title = "MA type", defval = "EMA", options = ["SMA", "EMA", "WMA", "VWAP"])
price = input(type=input.source, defval=low, title="MA Source")
enable_a = input(true, title="Enable MAs[a][20]")
enable_bc = input(false, title="Enable MAs[b][c]")
enable_BC = input(true, title="Enable MAs[B][C]")
enable_de = input(true, title="Enable MAs[d][e]")
enable_DE = input(true, title="Enable MAs[D][E]")
enable_custom = input(false, title="Enable Custom MA")
enable_common = input(false, title="Enable  MAs[20][50][200]")
title1 = "Custom MA Length\\\\n(4999 max for free accounts)"
length_custom = input(defval=9, title=title1)

// Style
thickness = 2
transp_ma = 40
transp_fill = 90
transp_fill_20 = 80

// colors
color_a = color.aqua
color_bB = color.fuchsia
color_cC = color.yellow
color_dD = color.orange
color_eE = color.lime
color_custom = color.silver

// EMA Local
ema20 = ema(price, 20), 	ema50 = ema(price, 50),		ema60 = ema(price, 60)
ema80 = ema(price, 80),		ema100 = ema(price, 100),	ema120 = ema(price, 120)
ema140 = ema(price, 140),	ema200 = ema(price, 200),	ema300 = ema(price, 300)
ema320 = ema(price, 320),	ema400 = ema(price, 400),	ema480 = ema(price, 480)
ema600 = ema(price, 600)
ema840 = ema(price, 840),	ema1200 = ema(price, 1200),	ema1600 = ema(price, 1600)
ema1920 = ema(price, 1920),	ema3360 = ema(price, 3360),	ema3600 = ema(price, 3600)
ema3840 = ema(price, 3840),	ema4800 = ema(price, 4800)
emaCustom = ema(price, length_custom)

// EMA Imported
ema20_5 = security(syminfo.tickerid, "5", ema20)
ema20_30 = security(syminfo.tickerid, "30", ema20)
ema20_60 = security(syminfo.tickerid, "60", ema20)
ema20_240 = security(syminfo.tickerid, "240", ema20)

// My timeframes: 1m, 3m, 5m, 15m, 1h, 4h, 1D, 1W, 1M

// emaCustom
plot(enable_custom ? emaCustom : na, title="[custom]", color=color_custom, linewidth=thickness, transp=transp_ma, editable=false) // emaCustom All Timeframes

// ema20, is is used in all timeframes
ema20_plot_a = plot(enable_a or enable_common ? ema20 : na, title="[a][20]", color=color_a, linewidth=thickness, transp=transp_ma, editable=false) // ema20 All Timeframes

// 1m timeframe
// 1m ab aB
ema100_plot_b = plot(enable_bc and timeframe.period == "1" ? ema100 : na, title="[b]", color=color_bB, linewidth=thickness, transp=transp_ma, editable=false) // 5m
ema20_5_plot_B = plot(enable_BC and timeframe.period == "1" ? ema20_5 : na, title="[B]", color=color_bB, linewidth=thickness, transp=transp_ma, editable=false) // 5m
bgc_ab = iff(ema20 > ema100, color.new(color.green, transp_fill_20), color.new(color.red, transp_fill))
bgc_aB = iff(ema20 > ema100, color.new(color.green, transp_fill_20), color.new(color.red, transp_fill))
bgc_bB = color.new(color_bB, transp_fill)
fill(ema20_plot_a, ema100_plot_b, bgc_ab, editable=false)
fill(ema20_plot_a, ema20_5_plot_B, bgc_aB, editable=false)
fill(ema100_plot_b, ema20_5_plot_B, bgc_bB, editable=false)
// 1m cC
ema600_plot_c = plot(enable_bc and timeframe.period == "1" ? ema600 : na, title="[c]", color = color_cC, linewidth=thickness, transp=transp_ma, editable=false) // 30m
ema20_30_C = plot(enable_BC and timeframe.period == "1" ? ema20_30 : na, title="[C]", color=color_cC, linewidth=thickness, transp=transp_ma, editable=false) // 30m
bgc_cC = color.new(color_cC, transp_fill)
fill(ema600_plot_c, ema20_30_C, bgc_cC, editable=false)
// 1m dD
ema1200_plot_d = plot(enable_de and timeframe.period == "1" ? ema1200 : na, title="[d]", color = color_dD, linewidth=thickness, transp=transp_ma, editable=false) // 1h
ema20_60_D = plot(enable_DE and timeframe.period == "1" ? ema20_60 : na, title="[D]", color=color_dD, linewidth=thickness, transp=transp_ma, editable=false) // 1h
bgc_dD = color.new(color_dD, transp_fill)
fill(ema1200_plot_d, ema20_60_D, bgc_dD, editable=false)
// 1m eE
ema4800_plot_e = plot(enable_de and timeframe.period == "1" ? ema4800 : na, title="[e]", color = color_eE, linewidth=thickness, transp=transp_ma, editable=false) // 4h
ema20_240_E = plot(enable_DE and timeframe.period == "1" ? ema20_240 : na, title="[E]", color=color_eE, linewidth=thickness, transp=transp_ma, editable=false) // 4h
bgc_eE = color.new(color_eE, transp_fill)
fill(ema4800_plot_e, ema20_240_E, bgc_eE, editable=false)
// 1m Special


// 3m timeframe
// bgc_3m = iff(ema20 > ema100, color.new(color.green, 80), color.new(color.red, 80))
// ema20_3m = plot(enable3m and enableAll and ema20 and timeframe.period == "3" ? ema20 : na, title=" 3m[A]", color=colorQuicker, linewidth=thickness, transp=transp_ma, editable=false)
// ema100_3m = plot(enable3m and enableAll and ema100 and timeframe.period == "3" ? ema100 : na, title=" 15m[B]", color=colorQuick, linewidth=thickness, transp=transp_ma, editable=false)
// plot(enable3m and enableAll and ema400 and timeframe.period == "3" ? ema400 : na, title=" 1h[C]", color=colorSlow, linewidth=thickness, transp=transp_ma, editable=false)
// plot(enable3m and enableAll and enableSecondary and ema1600 and timeframe.period == "3" ? ema1600 : na, title="4h", color=colorSlower, linewidth=thickness, transp=transp_ma, editable=false)
// //plot(enable3m and enableSecondary and ema300 and timeframe.period == "3" ? ema300 : na, title="15m", color=colorSlow, linewidth=thickness, transp=transp_ma, editable=false)
// fill(ema20_3m, ema100_3m, bgc_3m)

// // 5m timeframe
// bgc_5m = iff(ema20 > ema60, color.new(color.green, 80), color.new(color.red, 80))
// ema20_5m = plot(enable5m and enableAll and ema20 and timeframe.period == "5" ? ema20 : na, title=" 5m[A]", color=colorQuicker, linewidth=thickness, transp=transp_ma, editable=false)
// ema60_5m = plot(enable5m and enableAll and ema60 and timeframe.period == "5" ? ema60 : na, title=" 15m[B]", color=colorQuick, linewidth=thickness, transp=transp_ma, editable=false)
// plot(enable5m and enableAll and ema80 and timeframe.period == "5" ? ema80 : na, title=" 1h[C]", color=colorSlow, linewidth=thickness, transp=transp_ma, editable=false)
// plot(enable5m and enableAll and enableSecondary and ema320 and timeframe.period == "5" ? ema320 : na, title="4h", color=colorSlower, linewidth=thickness, transp=transp_ma, editable=false)
// // plot(enable5m and enableSecondary and ema4800 and timeframe.period == "5" ? ema4800 : na, title="4h", color=colorVerySlow, linewidth=thickness, transp=transp_ma, editable=false)
// fill(ema20_5m, ema60_5m, bgc_5m)

// 15m timeframe
// bgc_15m = iff(ema20 > ema80, color.new(color.green, 80), color.new(color.red, 80))
// ema20_15m = plot(enable15m and enableAll and ema20 and timeframe.period=="15" ? ema20 : na, title=" 15m[A]", color=colorQuicker, linewidth=thickness, transp=transp_ma, editable=false)
// ema80_15m = plot(enable15m and enableAll and ema80 and timeframe.period=="15" ? ema80 : na, title=" 1h[B]", color=colorQuick, linewidth=thickness, transp=transp_ma, editable=false)
// plot(enable15m and enableAll and ema320 and timeframe.period=="15" ? ema320 : na, title=" 4h[C]", color=colorSlow, linewidth=thickness, transp=transp_ma, editable=false)
// plot(enable15m and enableAll and enableSecondary and ema1920 and timeframe.period=="15" ? ema1920 : na, title="1D", color=colorSlower, linewidth=thickness, transp=transp_ma, editable=false)
// plot(enable15m and enableAll and enableSecondary and ema3840 and timeframe.period=="15" ? ema3840 : na, title="2D", color=colorVerySlow, linewidth=thickness, transp=transp_ma, editable=false)
// fill(ema20_15m, ema80_15m, bgc_15m)

// // // 30m timeframe 
// // // TODO
// // ema20_30m = plot(enable30m and enableAll and ema20 and timeframe.period=="30" ? ema20 : na, title=" 30m[A]", color=colorQuicker, linewidth=thickness, transp=transp_ma, editable=false)

// // 1h timeframe
ema80_plot_b = plot(enable_bc and timeframe.period == "60" ? ema80 : na, title="[b]", color=color_bB, linewidth=thickness, transp=transp_ma, editable=false) // 4h
ema20_240_plot_B = plot(enable_BC and timeframe.period == "60" ? ema20_240 : na, title="[B]", color=color_bB, linewidth=thickness, transp=transp_ma, editable=false) // 4h
bgc_ab_60 = iff(ema20 > ema80, color.new(color.green, transp_fill_20), color.new(color.red, transp_fill))
bgc_aB_60 = iff(ema20 > ema20_240, color.new(color.green, transp_fill_20), color.new(color.red, transp_fill))
bgc_bB_60 = color.new(color_bB, transp_fill)
fill(ema20_plot_a, ema80_plot_b, bgc_ab_60, editable=false)
fill(ema20_plot_a, ema20_240_plot_B, bgc_aB_60, editable=false)
fill(ema80_plot_b, ema20_240_plot_B, bgc_bB_60, editable=false)

// // 4h timeframe
// bgc_4h = iff(ema20 > ema120, color.new(color.green, 80), color.new(color.red, 80))
// ema20_4h = plot(enable4h and enableAll and ema20 and timeframe.period == "240" ? ema20 : na, title=" 4h[A]", color=colorQuicker, linewidth=thickness, transp=transp_ma, editable=false)
// ema120_4h = plot(enable4h and enableAll and ema120 and timeframe.period == "240" ? ema120 : na, title=" 1D[B]", color=colorQuick, linewidth=thickness, transp=transp_ma, editable=false)
// plot(enable4h and enableAll and ema840 and timeframe.period == "240" ? ema840 : na, title=" 1W[C]", color=colorSlow, linewidth=thickness, transp=transp_ma, editable=false)
// plot(enable4h and enableAll and enableSecondary  and ema3600 and timeframe.period == "240" ? ema3600 : na, title="1M", color=colorSlower, linewidth=thickness, transp=transp_ma, editable=false)
// fill(ema20_4h, ema120_4h, bgc_4h)

// // 1D timeframe
// bgc_1D = iff(ema20 > ema120, color.new(color.green, 80), color.new(color.red, 80))
// ema20_1D = plot(enable1D and enableAll and ema20 and timeframe.period == "D" ? ema20 : na, title=" 1D[A]", color=colorQuicker, linewidth=thickness, transp=transp_ma, editable=false)
// ema120_1D = plot(enable1D and enableAll and ema120 and timeframe.period == "D" ? ema120 : na, title=" 1W[B]", color=colorQuick, linewidth=thickness, transp=transp_ma, editable=false)
// plot(enable1D and enableAll and ema600 and timeframe.period == "D"  ? ema600 : na, title="1M [C]", color=colorSlow, linewidth=thickness, transp=transp_ma, editable=false)
// fill(ema20_1D, ema120_1D, bgc_1D)


// // 1W timeframe
// ema20_common_W = plot(enableCommon and enableAll and ema20 and timeframe.period == "W" ? ema20 : na, title=" 20ema[A]", color=colorQuicker, linewidth=thickness, transp=transp_ma, editable=false)
// ema50_common_W = plot(enableCommon and enableAll and ema50 and timeframe.period == "W" ? ema50 : na, title=" 50ema[B]", color=colorQuick, linewidth=thickness, transp=transp_ma, editable=false)
// plot(enableCommon and enableAll and ema200 and timeframe.period == "W" ? ema200 : na, title=" 200ema[C]", color=colorSlow, linewidth=thickness, transp=transp_ma, editable=false)
// fill(ema20_common_W, ema50_common_W, bgc_common)
// // 1M timeframe
// ema20_common_M = plot(enableCommon and enableAll and ema20 and timeframe.period == "M" ? ema20 : na, title=" 20ema[A]", color=colorQuicker, linewidth=thickness, transp=transp_ma, editable=false)
// ema50_common_M = plot(enableCommon and enableAll and ema50 and timeframe.period == "M" ? ema50 : na, title=" 50ema[B]", color=colorQuick, linewidth=thickness, transp=transp_ma, editable=false)
// plot(enableCommon and enableAll and ema200 and timeframe.period == "M" ? ema200 : na, title=" 200ema[C]", color=colorSlow, linewidth=thickness, transp=transp_ma, editable=false)
// fill(ema20_common_M, ema50_common_M, bgc_common)

// Common values, timeframe
bgc_common = iff(ema20 > ema50, color.new(color.green, 80), color.new(color.red, 80))
ema50_plot = plot(enable_common ? ema50 : na, title="[50]", color=color_bB, linewidth=thickness, transp=transp_ma, editable=false)
plot(enable_common ? ema200 : na, title="[200]", color=color_cC, linewidth=thickness, transp=transp_ma, editable=false)
fill(ema20_plot_a, ema50_plot, bgc_common, editable=false)


// TABLE: 1M = 30 days
// RANGES		Visible 20ema		Length Values									        Double checked
//  								1m      15m		1h		4h		1D		1W		1M      -
// 1m           1m, 15m, 1h, 4h     20      300     1200    4800    -       -       -
// 15m			15m, 1h, 4h, 1D		-       20 		80	 	320 	1920	-		-		Yes
// 1h			1h, 4h, 1D, 1W		-		-       20 		80		480 	3360	-		Yes	
// 4h			4h, 1D, 1W, 1M		-		-		-       20 		120		840		3600	Yes
// 1D			1D, 1W, 1M			-		-		-		-       20		140		600		Yes
// Common		All ranges			20	 	50	 	200     -       -       -       -       Not necessary
// END -------------------------------------------------------------------------

// RSI Signals -----------------------------------------------------------------
// @author Matthew J. Slabosz
// www.zenandtheartoftrading.com
// @modifier carloswm85

// Get user input
rsiLength = 14
rsiOverbought = 70
rsiOversold = 30
enableSignalsRSI =  input(title="Enable RSI Signals", type=input.bool, defval=true)
drawOnRT = true // "Draw On Candles Yet To Close"
rsi = rsi(close, rsiLength)
rsiSignalTransp = 0

// RSI Signal Levels
enableSignalGreen = input(type=input.bool, defval=true, title="Enable Green Signal (GS)")
signalGreen = input(title = "GS Resolution", defval = "1", type=input.resolution)
rsiImportedGreen = security(syminfo.tickerid, signalGreen != "Disable" ? signalGreen : na, rsi)
rsiOBgreen = rsiImportedGreen > rsiOverbought
rsiOSgreen = rsiImportedGreen < rsiOversold
plotshape(rsiOBgreen and enableSignalsRSI and enableSignalGreen and (barstate.ishistory or drawOnRT), color=color.green, transp=rsiSignalTransp, text="", editable=false, style=shape.triangledown, title="Overbought GS")
plotshape(rsiOSgreen and enableSignalsRSI and enableSignalGreen and (barstate.ishistory or drawOnRT), color=color.green, transp=rsiSignalTransp, text="", editable=false, style=shape.triangleup,	title = "Oversold GS", location=location.belowbar)

enableSignalYellow = input(type=input.bool, defval=true, title="Enable Yellow Signal (YS)")
signalYellow = input(title = "YS Resolution", defval = "5", type=input.resolution)
rsiImportedYellow = security(syminfo.tickerid, signalYellow != "Disable" ? signalYellow : na, rsi)
rsiOByellow = rsiImportedYellow > rsiOverbought
rsiOSyellow = rsiImportedYellow < rsiOversold
plotshape(rsiOByellow and enableSignalsRSI and enableSignalYellow and (barstate.ishistory or drawOnRT), color=color.yellow, transp=rsiSignalTransp, text="", editable=false, style=shape.triangledown, title="Overbought YS")
plotshape(rsiOSyellow and enableSignalsRSI and enableSignalYellow and (barstate.ishistory or drawOnRT), color=color.yellow, transp=rsiSignalTransp, text="", editable=false, style=shape.triangleup,	title = "Oversold YS", location=location.belowbar)

enableSignalRed = input(type=input.bool, defval=true, title="Enable Red Signal (RS)")
signalRed = input(title = "RS Resolution", defval = "15", type=input.resolution)
rsiImportedRed = security(syminfo.tickerid, signalRed, rsi)
rsiOBred = rsiImportedRed > rsiOverbought
rsiOSred = rsiImportedRed < rsiOversold
plotshape(rsiOBred and enableSignalsRSI and enableSignalRed and (barstate.ishistory or drawOnRT), color=color.red, transp=rsiSignalTransp, text="", editable=false, style=shape.triangledown, title="Overbought RS")
plotshape(rsiOSred and enableSignalsRSI and enableSignalRed and (barstate.ishistory or drawOnRT), color=color.red, transp=rsiSignalTransp, text="", editable=false, style=shape.triangleup,	title = "Oversold RS", location=location.belowbar)

enableSignalWhite = input(type=input.bool, defval=false, title="Enable White Signal (WS)")
signalWhite = input(title = "WS Resolution", defval = "30", type=input.resolution)
rsiImportedWhite = security(syminfo.tickerid, signalWhite, rsi)
rsiOBwhite = rsiImportedWhite > rsiOverbought
rsiOSwhite = rsiImportedWhite < rsiOversold
plotshape(rsiOBwhite and enableSignalsRSI and enableSignalWhite and (barstate.ishistory or drawOnRT), color=color.white, transp=rsiSignalTransp, text="HEY", editable=false, style=shape.triangledown, title="Overbought WS")
plotshape(rsiOSwhite and enableSignalsRSI and enableSignalWhite and (barstate.ishistory or drawOnRT), color=color.white, transp=rsiSignalTransp, text="HEY", editable=false, style=shape.triangleup,	title = "Oversold WS", location=location.belowbar)
// END -------------------------------------------------------------------------

// // BOLLINGER BANDS
// enableBB = input(false, title="Enable Bollinger Bands")
// length = timeframe.period == "1" ? 100 : timeframe.period == "3" ? 100 : timeframe.period == "5" ? 60 : timeframe.period == "15" ? 80 : timeframe.period == "30" ? 20 : timeframe.period == "60" ? 80 : timeframe.period == "240" ? 120 : timeframe.period == "D" ? 120 : timeframe.period == "W" ? 20 : 	timeframe.period == "M" ? 20 :	na
// src = input(low, title="Source BB")
// mult = input(2.0, minval=0.001, maxval=50, title="StdDev BB")
// basis = ema(src, length)
// dev = mult * stdev(src, length)
// upper = basis + dev
// lower = basis - dev
// offset = input(0, "Offset BB", type = input.integer, minval = -500, maxval = 500)
// plot(enableBB ? basis : na, "Basis BB", color=#872323, offset = offset, transp=100, editable = false)
// p1 = plot(enableBB ? upper : na, "Upper BB", color = colorQuick, offset = offset)
// p2 = plot(enableBB ? lower : na, "Lower BB", color = colorQuick, offset = offset)
// fill(p1, p2, title = "Background BB", color=#198787, transp=96)
// // END -------------------------------------------------------------------------
