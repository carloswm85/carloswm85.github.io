//@version=4
// HOW TO USE ON TRADING
// - Above 50, market is bullish.
// - Below 50, market is bearish.
// - Ranging above 62.5, market is very bullish.
// - Ranging below 37.5, market is very bearish.
// - When is the price ranging1/
study(title="RSI, by BJB", shorttitle="RSI", format=format.price, precision=2, scale=scale.right)

// CONTENT
// RSI --------------------------------------------------
rsiResolution = input(title = "RSI Resolution", defval = "", type=input.resolution)
rsiEnable = input(true, title="Enable RSI")
rsiEnablePoints = input(false, title="Enable RSI Points")
rsiEnableBG = input(true, title="Enable RSI Background")
rsiEnableExtraLines = input(false, title="Enable RSI Extra Lines")

// RSI
thickness = 2
opacity = 0
rsiLen = input(14, minval=1, title="RSI Length")
rsiSrc = input(close, "RSI Source", type = input.source)
rsi = rsi(rsiSrc, rsiLen)
OB = input(defval=70, title="Overbought")
OS = input(defval=30, title="Oversold")
rsiDisplayed = security(syminfo.tickerid, rsiResolution, rsi)

// RSI 15m
src_15 = security(syminfo.tickerid, "15", rsi, lookahead=barmerge.lookahead_on)
plot(rsiEnable and rsiEnableExtraLines and timeframe.period == "1" ? src_15 : na, color=color.yellow, title="RSI 15m", style=plot.style_stepline, linewidth=1, transp=10, editable=false)

// // RSI 60m
src_60 = security(syminfo.tickerid, "60", rsi)
plot(rsiEnable and rsiEnableExtraLines and timeframe.period == "1" ? src_60 : na, color=color.blue, title="RSI 1h", style=plot.style_stepline, linewidth=1, transp=10, editable=false)

// // RSI 240m
src_240 = security(syminfo.tickerid, "240", rsi)
plot(rsiEnable and rsiEnableExtraLines and timeframe.period == "1" ? src_240 : na, color=color.purple, title="RSI 4h", style=plot.style_stepline, linewidth=1, transp=10, editable=false)

// RSI Current Timeframe
plot(rsiEnable ? rsiDisplayed : na, color=rsi >= 50 ? color.green : color.red, title="RSI", linewidth=thickness, transp=opacity, editable=false)
plot(rsiEnablePoints and rsiEnable ? rsiDisplayed : na, title="Point", style=plot.style_cross, color=color.white, editable=false)

// RSI SMA
rsiSmaEnable = input(false, title="Enable RSI SMA")
rsiLenSma = input(14, minval=1, title="RSI SMA Length")
rsiSma = sma(rsiDisplayed, rsiLenSma)
plot(rsiSmaEnable ? rsiSma : na, color=rsiSma >= 50 ? color.green : color.red, title="RSI SMA", linewidth=thickness, transp=opacity, editable=false)

// RSI Signals
rsiOB = rsiDisplayed > OB
rsiOS = rsiDisplayed < OS
// RSI
plotshape(rsiOB and rsiEnable and  rsiResolution == ""  ? rsiDisplayed + 4 : na, title= "Overbought",location=location.absolute, color=color.green, transp=20, style=shape.triangledown, text="", editable=false)
plotshape(rsiOS and rsiEnable and rsiResolution == "" ? rsiDisplayed - 4 : na, title= "Oversold", location=location.absolute, color=color.red, transp=20, style=shape.triangleup, text="", editable=false)
alertcondition(rsiOB or rsiOS and timeframe.period == "1", title="RSI OB/OS Alarm 1m", message="RSI OB/OS 1m: {{ticker}}, RSI = {{plot_0}}")

// RSI Dominance
rsiEnableDominance = true
rsiEnableDominanceLabels = input(true, title="Enable RSI Dominance Labels")
rsiEnableDominanceLines = input(false, title="Enable RSI Dominance Lines")
green = (rsiDisplayed>=50) ? 1:0
red = (rsiDisplayed<50) ? -1:0
lengthCounter = input(defval=240, title= "RSI Dominance")
greensum = sum(green, lengthCounter)
greenSumPercent = (greensum * 100) / lengthCounter
redsum = sum(red, lengthCounter)
redSumPercent = (redsum * 100) / lengthCounter
bartime = time - time[1]
lblXdistance = time + 21 * bartime
dominanceChangeSignal = greenSumPercent == 50

// BACKGROUND
color_red = color.new(color.red, 40)
color_green = color.new(color.green, 40)
color_mid = color.new(color.white, 40)
style_extreme = hline.style_dashed
style_middle = hline.style_dotted
style_quarter = hline.style_dotted
qub = (OB - 50) / 2 + 50 // Quarter Upper Band location
qlb = 50 - (50 - OS) / 2 // Quarter Lower Band location
upperLine = hline(rsiEnableBG ? OB : na, "Upper Band", color=color_green, linestyle=style_extreme, editable=false)
hline(rsiEnableBG ? qub : na, "Quarter Upper Band", color=color_green, linestyle=style_quarter, editable=false)
middleLine = hline(rsiEnableBG ? 50 : na, "Middle Band", color=color_mid, linestyle=style_middle, editable=false)
hline(rsiEnableBG ? qlb : na, "Quarter Lower Band", color=color_red, linestyle=style_quarter, editable=false)
lowerLine = hline(rsiEnableBG ? OS : na, "Lower Band", color=color_red, linestyle=style_extreme, editable=false)
bgc_ul = iff(rsiEnableDominanceLines == true, color.new(color.green, 100), color.new(color.green, 90))
bgc_ll = iff(rsiEnableDominanceLines == true, color.new(color.red, 100), color.new(color.red, 90))
fill(upperLine, middleLine, color=bgc_ul, editable=false)
fill(lowerLine, middleLine, color=bgc_ll, editable=false)

// RSI Dominance Lines
bgc_dl = iff(greenSumPercent > -redSumPercent, color.new(color.green, 90), color.new(color.red, 90))
bullishDominanceLine = plot(rsiEnableDominance and rsiEnableDominanceLines ? greenSumPercent : na, color=color.green, transp=0, editable=false, title="Bullish")
bearishDominanceLine = plot(rsiEnableDominance and rsiEnableDominanceLines ? -redSumPercent : na, color=color.red, transp=0, editable=false, title="Bearish")
fill(bullishDominanceLine, bearishDominanceLine, bgc_dl, editable = false)
plotshape(dominanceChangeSignal and rsiEnableDominance and (rsiEnable or rsiSmaEnable) ? 50 : na, title= "Dominance change",location=location.absolute, color=color.silver, transp=0, style=shape.xcross, text="", editable=false)

// Dominance Labels
conditionA = barstate.islast and rsiEnableDominanceLabels and not rsiEnableDominanceLines
barcountlbl = label.new(conditionA ? lblXdistance : na, OB,  xloc=xloc.bar_time, textcolor=color.white, text = tostring(lengthCounter) + " bars", style=label.style_none)
label.delete(barcountlbl[1])
greenlbl = label.new(conditionA ? lblXdistance : na, qub, xloc=xloc.bar_time, textcolor=color.green, text = "Bullish: " + tostring(greenSumPercent, "#.##") + " %", style=label.style_none)
label.delete(greenlbl[1])
redlbl = label.new(conditionA ? lblXdistance : na, 50, xloc=xloc.bar_time, textcolor=color.red, text = "Bearish: " + tostring(-redSumPercent, "#.##") + " %", style=label.style_none)
label.delete(redlbl[1])
    
conditionB = bar_index[lengthCounter] and rsiEnableDominance
predominanceLimit = line.new(conditionB ? bar_index[lengthCounter] : na, 25, bar_index[lengthCounter], 75, xloc=xloc.bar_index, extend=extend.both, color=color.new(color.white, 20), width=1, style=line.style_dashed)
line.delete(predominanceLimit[1])

// ADX --------------------------------------------------
//@version=4
enableADX = input(false, title="Enable ADX")
adxlen = input(14, title="ADX Smoothing")
dilen = input(14, title="ADX DI Length")
dirmov(len) =>
	up = change(high)
	down = -change(low)
	plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
	minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
	truerange = rma(tr, len)
	plus = fixnan(100 * rma(plusDM, len) / truerange)
	minus = fixnan(100 * rma(minusDM, len) / truerange)
	[plus, minus]
adx(dilen, adxlen) =>
	[plus, minus] = dirmov(dilen)
	sum = plus + minus
	adx = 100 * rma(abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)
sig = adx(dilen, adxlen)
plot(enableADX and sig ? sig: na, color=color.yellow, title="ADX")

// ATR
enableATR = input(false, title="Enable ATR")
length = input(title="ATR Length", defval=9, minval=1)
lowerATR = input(title="ATR Lower Extention", defval=0.35)
upperATR = input(title="ATR Upper Extention", defval=0.35)
smoothing = input(title="ATR Smoothing", defval="RMA", options=["RMA", "SMA", "EMA", "WMA"])
ma_function(source, length) =>
	if smoothing == "RMA"
		up = rma(max(change(source), 0), length)
        down = rma(-min(change(source), 0), length)
        rma = (down == 0 ? 100 : (up == 0 ? 0 : 100) - (100 / (1 + up / down )))
	else
		if smoothing == "SMA"
			up = sma(max(change(source), 0), length)
            down = sma(-min(change(source), 0), length)
            rma = (down == 0 ? 100 : (up == 0 ? 0 : 100) - (100 / (1 + up / down)))
		else
			if smoothing == "EMA"
				up = ema(max(change(source), 0), length)
                down = ema(-min(change(source), 0), length)
                rma = (down == 0 ? 100 : (up == 0 ? 0 : 100) - (100 / (1 + up / down)))
			else
				up = wma(max(change(source), 0), length)
                down = wma(-min(change(source), 0), length)
                rma = (down == 0 ? 100 : (up == 0 ? 0 : 100) - (100 / (1 + up / down)))
atrValue = ma_function(tr(true), length)
stretchedAtrValue = atrValue < 50 ? atrValue - atrValue * lowerATR : atrValue + atrValue * upperATR
atrSmoothed = sma(stretchedAtrValue, length)
plot(enableATR and atrSmoothed ? atrSmoothed : na, title = "ATR", color=color.orange, transp=0)
// END


